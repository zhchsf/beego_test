#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'rpc_service_types'

module RpcService
  class Client
    include ::Thrift::Client

    def funCall(callTime, funCode, paramMap)
      send_funCall(callTime, funCode, paramMap)
      return recv_funCall()
    end

    def send_funCall(callTime, funCode, paramMap)
      send_message('funCall', FunCall_args, :callTime => callTime, :funCode => funCode, :paramMap => paramMap)
    end

    def recv_funCall()
      result = receive_message(FunCall_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'funCall failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_funCall(seqid, iprot, oprot)
      args = read_args(iprot, FunCall_args)
      result = FunCall_result.new()
      result.success = @handler.funCall(args.callTime, args.funCode, args.paramMap)
      write_result(result, oprot, 'funCall', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class FunCall_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CALLTIME = 1
    FUNCODE = 2
    PARAMMAP = 3

    FIELDS = {
      CALLTIME => {:type => ::Thrift::Types::I64, :name => 'callTime'},
      FUNCODE => {:type => ::Thrift::Types::STRING, :name => 'funCode'},
      PARAMMAP => {:type => ::Thrift::Types::MAP, :name => 'paramMap', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class FunCall_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

